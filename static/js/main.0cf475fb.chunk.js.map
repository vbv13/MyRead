{"version":3,"sources":["BooksAPI.js","Book.js","BookShelf.js","BookSearch.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","Book","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeBookShelf","event","target","value","setState","currentShelfOfBook","updatingBookShelf","state","react_default","a","createElement","className","onChange","disabled","style","width","height","backgroundImage","imageLinks","thumbnail","getBookShelfChangeOption","title","authors","Component","BookShelf","map","key","src_Book","BookSearch","maximumOfBookObjects","searchBooks","searchQuery","BooksAPI","searchableBooks","length","forEach","booksInShelves","find","currentBook","booksList","_this2","react_router_dom","to","type","placeholder","App","newShelf","allBooks","filter","b","shelfName","_this3","react_router","exact","path","render","src_BookShelf","getCurrentShelf","_this4","renderBookContent","_ref","history","src_BookSearch","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.0cf475fb.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Book extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        currentShelfOfBook: this.props.book.shelf,\r\n        updatingBookShelf: false\r\n      }\r\n    }\r\n\r\n    changeBookShelf = (event) => {\r\n        this.props.changeBookShelf(this.props.book, event.target.value);\r\n        this.setState({\r\n          currentShelfOfBook: event.target.value,\r\n          updatingBookShelf: true\r\n        })  \r\n  }\r\n\r\n    /*getDerivedStateFromProps () {\r\n      this.setState({\r\n        updatingBookShelf: false\r\n      })\r\n    }*/\r\n\r\n    getBookShelfChangeOption() {\r\n      return (\r\n        <div className=\"book-shelf-changer\">\r\n        <select \r\n            value={this.state.currentShelfOfBook}\r\n            onChange={this.changeBookShelf}\r\n        >\r\n          <option value=\"move\" disabled>Move to...</option>\r\n          <option value=\"currentlyReading\">Currently Reading</option>\r\n          <option value=\"wantToRead\">Want to Read</option>\r\n          <option value=\"read\">Read</option>\r\n          <option value=\"none\">None</option>\r\n        </select>\r\n        { this.state.updatingBookShelf && (<div className=\"cssload-spin-box\"></div>) }\r\n      </div>\r\n      )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"book\">\r\n            <div className=\"book-top\">\r\n              <div className=\"book-cover\" style={{ \r\n                  width: 128, \r\n                  height: 193, \r\n                  backgroundImage: `url(\"${this.props.book.imageLinks.thumbnail}\")` }}>\r\n              </div>\r\n\r\n                {this.getBookShelfChangeOption()}\r\n            </div>\r\n            <div className=\"book-title\">{this.props.book.title}</div>\r\n            <div className=\"book-authors\">{this.props.book.authors}</div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\nBook.propTypes = {\r\n  book: PropTypes.object.isRequired,\r\n  changeBookShelf: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Book;","import React, { Component } from 'react';\r\nimport Book from './Book';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass BookShelf extends Component {\r\n    render() {\r\n        return (\r\n             <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">{this.props.title}</h2>\r\n                <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                        {this.props.books.map((book) => (\r\n                            <li key={book.id} className=\"book-list-item\">\r\n                                <Book \r\n                                   book={book} \r\n                                   changeBookShelf={this.props.changeBookShelf}\r\n                                />       \r\n                            </li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n             </div> \r\n        );\r\n    }\r\n}\r\nBookShelf.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    books: PropTypes.array.isRequired,\r\n    changeBookShelf: PropTypes.func.isRequired\r\n}\r\n\r\nexport default BookShelf;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport Book from \"./Book\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass BookSearch extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            booksList: []\r\n        }\r\n    }\r\n\r\n    maximumOfBookObjects = 20\r\n\r\n    searchBooks = (searchQuery) => {\r\n        if(searchQuery) {\r\n            BooksAPI.search(searchQuery, this.maximumOfBookObjects).then((searchableBooks) => {\r\n                if(searchableBooks.length) {\r\n                    searchableBooks.forEach((book) => {\r\n                        let booksInShelves = this.props.books.find((currentBook) => currentBook.id === book.id);\r\n                        if(booksInShelves) {\r\n                            book.shelf = booksInShelves.shelf\r\n                        } else {\r\n                            book.shelf = 'none'\r\n                        }\r\n                    });\r\n                    this.setState({\r\n                        booksList: searchableBooks\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            this.setState({\r\n                booksList: []\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                <Link className=\"close-search\" to='/'>Close</Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        {/*\r\n                        NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                        You can find these search terms here:\r\n                        https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                        However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                        you don't find a specific author or title. Every search is limited by search terms.\r\n                        */}\r\n                        <input \r\n                        type=\"text\" \r\n                        placeholder=\"Search by title or author\"\r\n                        onChange={(event) => this.searchBooks(event.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                <ol className=\"books-grid\">\r\n                        {this.state.booksList.map((book) => (\r\n                            <li key={book.id} className=\"book-list-item\">\r\n                                <Book\r\n                                    book={book}\r\n                                    changeBookShelf={this.props.changeBookShelf}\r\n                                />\r\n                            </li>\r\n                        ))}\r\n                </ol>\r\n                </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\nBookSearch.propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n    changeBookShelf: PropTypes.func.isRequired\r\n}\r\n\r\nexport default BookSearch;","import React, { Component } from 'react';\r\nimport { Link, Route } from 'react-router-dom';\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport BookShelf from './BookShelf';\r\nimport BookSearch from './BookSearch';\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            allBooks: [],\r\n            booksList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        BooksAPI.getAll().then((books) => {\r\n            this.setState({\r\n                allBooks: books\r\n            })\r\n        })\r\n    }\r\n\r\n    changeBookShelf = (book, newShelf) => {     //we want to delete specific book from one shelf and add it to another\r\n        BooksAPI.update(book, newShelf).then(() => {\r\n            book.shelf=newShelf\r\n            this.setState(state => ({    //state - current state\r\n                allBooks: state.allBooks.filter(b => b.id !== book.id).concat( [book] ) //book - book that was clicked on //b - state books id, b- current book\r\n            }))\r\n        })\r\n    }\r\n\r\n    getCurrentShelf(shelfName){\r\n        return this.state.allBooks.filter((book) => book.shelf === shelfName)\r\n    }\r\n\r\n    renderBookContent() {\r\n        return(\r\n            <Route exact path=\"/\" render={() => (\r\n            <div className=\"list-books\">\r\n                <div className=\"list-books-title\">\r\n                    <h1>MyReads</h1>\r\n                </div>\r\n                <div className=\"list-books-content\">\r\n                    <div>\r\n                        <BookShelf \r\n                            title=\"Currently Reading\"\r\n                            changeBookShelf={this.changeBookShelf}\r\n                            books={this.getCurrentShelf(\"currentlyReading\")}\r\n                        />\r\n                        <BookShelf \r\n                            title=\"Want to Read\"\r\n                            changeBookShelf={this.changeBookShelf}\r\n                            books={this.getCurrentShelf(\"wantToRead\")}\r\n                        />\r\n                        <BookShelf \r\n                            title=\"Read\"\r\n                            changeBookShelf={this.changeBookShelf}\r\n                            books={this.getCurrentShelf(\"read\")}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"open-search\">\r\n                    <Link to=\"/search\">Add a book</Link>\r\n                </div>\r\n            </div>\r\n        )}/>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                    {this.renderBookContent()}\r\n                <Route path='/search' render={({history}) => (\r\n                    <BookSearch\r\n                        books = {this.state.allBooks}\r\n                        changeBookShelf={this.changeBookShelf}\r\n                    />\r\n                )}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\r\n"],"sourceRoot":""}